

输入命令:kubectl create secret -h

输出内容: 
Create a secret with specified type.

 A docker-registry type secret is for accessing a container registry.

 A generic type secret indicate an Opaque secret type.

 A tls type secret holds TLS certificate and its associated key.

Available Commands:
  docker-registry   创建一个给 Docker registry 使用的 Secret
  generic           Create a secret from a local file, directory, or literal value
  tls               创建一个 TLS secret

Usage:
  kubectl create secret (docker-registry | generic | tls) [options]

Use "kubectl create secret <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).


  访问数据库的命令可以归纳到generic类型的secret中,有如下两种创建方法:
  1. kubectl create secret generic db-credentials --from-file=username=username.txt --from-file=password=password.txt
     username.txt和password.txt是两个文本文件,内容分别为root,内容为password
  
  2. kubectl create secret generic db-credentials --from-literal=username=root --from-literal=password=password
     直接在命令行中输入用户名和密码
  
  这两种方法创建的secret是一样的,都可以通过kubectl get secret db-credentials -o yaml查看到secret的内容
  但是第二种方法创建的secret在yaml文件中是以string类型存储的,而第一种方法创建的secret在yaml文件中是以binaryData类型存储的
  这两种方法创建的secret在使用时没有区别,都可以通过kubectl get secret db-credentials -o yaml查看到secret的内容
  
  创建结果(请注意缩进的空格符号):
  apiVersion: v1
  kind: Secret
  metadata:
    name: db-credentials
  type: Opaque
  data:
    username: cm9vdA== # base64编码后的字符串 'root'
    password: cGFzc3dvcmQ= # base64编码后的字符串 'password'

在K8S中，为了安全管理敏感数据（如用户名、密码、API密钥等），我们通常使用Secret来存储这些信息。应用程序可以通过访问Secret中的键值对来获取这些信息。然而，在实际使用中，可能会因为Secret配置不当而导致应用程序运行异常。例如，本文将讨论一个应用程序因Secret中值的格式问题导致数据库连接失败的案例，并提供解决方法。
如图2和图3， 应用程序在启动时会通过环境变量或挂载的文件读取Secret中的值，并使用这些值与数据库建立连接。

应用程序启动时报错 当应用程序启动时，尝试连接到数据库却报出以下错误：
Unable to obtain connection from database (jdbc:mysql://mysqldb:3306/mysql?Unicode=true&characterEncoding=UTF-8) for user 'root': Access denied for user 'root'@'10.4.214.53' (using password: YES)
从日志可以看出，应用程序无法使用提供的用户名和密码成功连接到数据库。

经过各项检查，发现应用程序的数据库连接配置没有问题。于是我们开始怀疑Secret中的值可能存在问题。通过kubectl get secret db-credentials -o yaml命令查看Secret的内容，发现Secret中的username和password字段的值是经过base64编码的字符串，而不是明文字符串。
经过解码，我们发现Secret中的username和password字段的值确实是正确的明文字符串（root和password）。
经过在此检查核对，发现问题出在Secret的创建上。我们使用kubectl create secret generic db-credentials --from-file=username=username.txt --from-file=password=password.txt命令创建了Secret，其中username.txt和password.txt是两个文本文件，内容分别为root和password。
但是在生成username.txt和password.txt文件时，使用了文本编辑器vim，输入密码后直接保存退出，vim 通常会在文件末尾添加一个换行符（\n），导致Secret中的值包含了额外的换行符。
因此，应用程序在使用这些值连接数据库时，实际上是使用了带有换行符的用户名和密码，从而导致连接失败。

 查看所有pod: kubectl get pods
 输出内容:
 NAME         READY   STATUS             RESTARTS   AGE
 nginx-pod    1/1     Running            0          5m
 app-pod      0/1     CrashLoopBackOff   3          10m

 查看 Pod 的详情:kubectl describe pod <pod-name>
 查看容器日志:kubectl logs <pod-name>
 如果 Pod 有多个容器，可以指定容器名称:kubectl logs <pod-name> -c <container-name>

 CrashLoopBackOff： 查看容器日志：kubectl logs <pod-name>

 ImagePullBackOff：检查 Pod 的镜像配置是否正确：
 containers:
  - name: my-container
    image: myregistry.io/myimage:1.0

 ErrImagePull： 本地尝试手动拉取镜像：docker pull <镜像地址>

 ContainerCreating：查看 Pod 的事件日志：kubectl describe pod <pod-name>

 OOMKilled：增加 Pod 的内存限制：
 resources:
  limits:
    memory: "512Mi"
 
 Evicted：检查集群资源是否不足，查看节点状态： kubectl describe node

 Unschedulable：
    使用以下命令 Pod 调度失败的原因，在 Events 部分，你会看到详细的调度失败日志：
      kubectl describe pod <pod-name>
    同上命令，检查 Pod 的调度规则：
      nodeSelector:
        disktype: ssd
    使用以下命令查看节点状态：kubectl describe node <node-name>

 Error: 查看容器的日志以找到具体错误：kubectl logs <pod-name>

 PodInitializing: 查看 Pod 的事件日志，检查初始化initContainer进度/状态：
    kubectl describe pod <pod-name>

 NodeLost: 
   查看节点的状态：kubectl get nodes
   如果节点无法恢复，使用以下命令让 Kubernetes 调度新 Pod 到其他可用节点：
      kubectl delete pod <pod-name>
 
 Completed：
   如果是手动创建的 Pod，可以用以下命令清理：
      kubectl delete pod <pod-name>