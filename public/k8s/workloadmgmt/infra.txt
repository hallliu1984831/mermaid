章节1: 服务器端口：数字世界的门牌号
大家好！今天来聊聊一个看似简单但超级重要的基础设施话题: 服务器端口（Port）。
如果把服务器比作一栋大楼，那端口就像是每个房间的门牌号，没有它们，你就找不到任何服务！
1️⃣ 端口是什么？服务器的"门牌号" 🏠
想象一下，你要去一栋写字楼找公司。你知道公司在"科技大厦"，但这栋楼有50层、每层20个房间，没有门牌号你怎么找？端口就是这个门牌号！
服务器端口的作用：
👉 唯一标识：每个端口对应一个特定的服务
👉 流量分发：不同的请求通过不同端口进入不同服务
👉 资源隔离：各个服务互不干扰，各自占用独立端口
👉 并发处理：同一台服务器可以同时提供多种服务
举个例子🌰，如图2中所列举的端口，就像写字楼里：
👉 22端口 = 保安室（SSH远程登录）
👉 80端口 = 前台大厅（HTTP网站服务）
👉 443端口 = VIP接待室（HTTPS安全服务）
👉 3306端口 = 档案室（MySQL数据库）
2️⃣ 对外服务必须有端口：没门牌号就是"黑户" 🚪
在数字世界里，任何想要对外提供服务的应用都必须有端口，这是铁律！就像公司必须有门牌号一样，没有端口的服务就是"黑户"，谁也找不到。
为什么所有对外服务都需要端口？
网络通信的基本原理：
👉 IP地址：确定是哪台服务器（哪栋楼）
👉 端口号：确定是哪个服务（哪个房间）
👉 协议：确定怎么通信（敲门方式）
3️⃣ 端口分类
👉 知名端口（0-1023）：系统保留，需要管理员权限
👉 注册端口（1024-49151）：应用程序使用
👉 动态端口（49152-65535）：临时分配使用
4️⃣ 端口监控：SRE的"安全巡逻" 👮‍♂️
作为SRE，端口监控就像是大楼安全巡逻，必须时刻关注每个"门"的状态。一个端口出问题，整个应用就无法对外提供服务。在出错的第一时间就需要被发现并上报进行处理。
已有最佳实践：
NOC 通过监控系统发现端口无法访问，上报至SRE进行检查修复，尽快修复。同时通知应用的客户可能带来的影响。 👍
未来趋势：
AI 会自动检测端口异常，执行预设的恢复脚本（重启服务、切换备用端口等），无法自动恢复时才升级到SRE🐮

----- English
Chapter 1: Server Ports - The Address System of the Digital World

Hello everyone! Today let's talk about a seemingly simple but extremely important infrastructure topic: server ports. If we compare a server to a building, then ports are like room numbers for each room - without them, you can't find any service!

1️⃣ What are Ports? Server "Room Numbers" 🏠

Imagine you need to visit a company in an office building. You know the company is in "Tech Tower," but this building has 50 floors with 20 rooms per floor - how would you find it without room numbers? Ports are exactly these room numbers!

Server Port Functions:
👉 Unique identification: Each port corresponds to a specific service
👉 Traffic distribution: Different requests enter different services through different ports
👉 Resource isolation: Services don't interfere with each other, each occupying independent ports
👉 Concurrent processing: The same server can provide multiple services simultaneously

For example 🌰, the ports listed are like rooms in an office building:
👉 Port 22 = Security office (SSH remote login)
👉 Port 80 = Front lobby (HTTP web service)
👉 Port 443 = VIP reception room (HTTPS secure service)
👉 Port 3306 = Archive room (MySQL database)

2️⃣ External Services Must Have Ports: No Room Number Means "Illegal Resident" 🚪

In the digital world, any application that wants to provide external services must have a port - this is an iron rule! Just like companies must have room numbers, services without ports are "illegal residents" that nobody can find.

Why do all external services need ports?

Basic principles of network communication:
👉 IP address: Determines which server (which building)
👉 Port number: Determines which service (which room)
👉 Protocol: Determines how to communicate (how to knock on the door)

3️⃣ Port Classification

👉 Well-known ports (0-1023): System reserved, require administrator privileges
👉 Registered ports (1024-49151): Used by applications
👉 Dynamic ports (49152-65535): Temporarily allocated for use

4️⃣ Port Monitoring: SRE's "Security Patrol" 👮‍♂️

As an SRE, port monitoring is like building security patrol - you must constantly watch the status of every "door." When a port has problems, the entire application cannot provide external services. Issues must be discovered and reported for handling at the first moment they occur.

Current Best Practices:
NOC discovers port inaccessibility through monitoring systems, reports to SRE for inspection and repair, and fixes as quickly as possible. Meanwhile, notifies application customers of potential impacts. 👍

Future Trends:
AI will automatically detect port anomalies, execute preset recovery scripts (restart services, switch to backup ports, etc.), and only escalate to SRE when automatic recovery fails 🐮


举个栗子：
```bash
# 查看服务器端口使用情况
netstat -tlnp
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1234/sshd
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      5678/nginx
tcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      5678/nginx
tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      9012/mysqld
```

章节2: 服务器端口：SRE的检查清单
大家好，前篇介绍了端口的重要性，今天来聊聊作为SRE，如何监控端口健康状态。
1️⃣ 端口健康检查分类：
👉 开源工具类：
1. Prometheus blackbox：通过主机名 + 端口号的方式进行端口的健康检查，生成检查指标
2. Prometheus: 通过scrape目标的metrics端点来收集指标，同时验证端口连通性
3. 其他工具诸如 icinga、zabbix等

👉 命令行类：
1. nmap：扫描端口开放情况
2. telnet/nc：检查端口连通性
3. curl：检查HTTP服务响应
4. ss/netstat：检查端口连接状态

👉 开发端口扫描工具
1. 编程语言通过socket命令，指定主机名 + 端口号来进行连接，如果socket连接成功，说明端口是健康的，需要定期调度执行并生成定制化指标，否则无法暴露结果
2. 编写bash脚本，定期调度执行，生成定制化的指标，暴露结果，例子如下：
```bash
# 端口健康检查脚本
#!/bin/bash
check_port() {
    local host=$1
    local port=$2
    local service=$3

    if timeout 5 bash -c "</dev/tcp/$host/$port"; then
        echo "✅ $service ($host:$port) is UP"
        return 0
    else
        echo "❌ $service ($host:$port) is DOWN"
        # 发送告警通知:邮件，即时通讯工具
        send_alert "$service service is down! ($host:$port)"
        return 1
    fi
}

# 批量检查关键端口
check_port "192.168.1.100" "80" "Web服务"
check_port "192.168.1.101" "3306" "MySQL数据库"
check_port "192.168.1.102" "6379" "Redis缓存"
check_port "192.168.1.103" "22" "SSH远程登录"
```

2️⃣ 端口出错分类：
👉 端口无响应
👉 端口响应慢
👉 端口连接数过多
👉 端口被恶意扫描

3️⃣ SRE端口监控最佳实践：
👉 多层次监控：
基础监控：端口是否监听
功能监控：服务是否正常响应
性能监控：响应时间和吞吐量
安全监控：异常连接和攻击检测

👉 自动化检测，检查分类提到的所有工具均可用于自动化检测

👉 端口安全管理：
最小化原则：只开放必要的端口
访问控制：使用防火墙限制端口访问
定期审计：检查是否有未授权的端口开放
端口扫描防护：检测和阻止恶意扫描

4️⃣ 端口故障排查：SRE的"破案神技" 🔍
当端口出问题时，SRE就像侦探一样，要快速定位问题根因：
👉 快速响应：立即检查服务状态和端口监听
👉 影响评估：确定故障影响范围和用户数量
👉 临时恢复：优先恢复服务，再查找根因
👉 根因分析：深入分析故障原因
👉 预防措施：制定预防类似问题的方案

5️⃣ AI检测：
👉 异常模式识别：基于历史数据学习正常行为模式
👉 智能告警降噪：减少误报，提高告警质量
👉 自动故障恢复：预设恢复策略的智能执行
👉 预测性维护：提前预警潜在问题
大家觉得还有哪些AI应用场景？欢迎讨论！

端口就像数字世界里每个服务的门牌号——没有门牌号，再好的服务也是"黑户"；门牌号出问题，用户就找不到你的服务。作为SRE，监控端口就像大楼安全巡逻，必须确保每个"门"都正常开放，响应及时，安全可靠！   

----- English
Server Ports：SRE's Check list
Hello everyone, the previous chapter introduced the importance of ports. Today let's talk about how to monitor port health status as an SRE.

1️⃣ Port Health Check Classification:

👉 Open Source Tools:
1. Prometheus blackbox: Performs port health checks through hostname + port number, generating check metrics
2. Prometheus: Collects metrics through scrape target metrics endpoints while verifying port connectivity
3. Other tools such as Icinga, Zabbix, etc.

👉 Command Line Tools:
1. nmap: Scans port availability
2. telnet/nc: Checks port connectivity
3. curl: Checks HTTP service response
4. ss/netstat: Checks port connection status

👉 Develop Port Scanning Tools:
1. Programming languages use socket commands, specifying hostname + port number for connection. If socket connection succeeds, the port is healthy. Need to schedule regular execution and generate customized metrics, otherwise results cannot be exposed.
2. Write bash scripts, schedule regular execution, generate customized metrics, expose results. Example as follows:

```bash
# Port health check script
#!/bin/bash
check_port() {
    local host=$1
    local port=$2
    local service=$3

    if timeout 5 bash -c "</dev/tcp/$host/$port"; then
        echo "✅ $service ($host:$port) is UP"
        return 0
    else
        echo "❌ $service ($host:$port) is DOWN"
        # Send alert notification: email, instant messaging tools
        send_alert "$service service is down! ($host:$port)"
        return 1
    fi
}

# Batch check critical ports
check_port "192.168.1.100" "80" "Web Service"
check_port "192.168.1.101" "3306" "MySQL Database"
check_port "192.168.1.102" "6379" "Redis Cache"
check_port "192.168.1.103" "22" "SSH Remote Login"
```

2️⃣ Port Error Classification:
👉 Port unresponsive
👉 Slow port response
👉 Too many port connections
👉 Port being maliciously scanned

3️⃣ SRE Port Monitoring Best Practices:

👉 Multi-level Monitoring:
Basic monitoring: Whether ports are listening
Functional monitoring: Whether services respond normally
Performance monitoring: Response time and throughput
Security monitoring: Abnormal connections and attack detection

👉 Automated detection - all tools mentioned in the check classification can be used for automated detection

👉 Port Security Management:
Minimization principle: Only open necessary ports
Access control: Use firewalls to restrict port access
Regular audits: Check for unauthorized open ports
Port scan protection: Detect and block malicious scanning

4️⃣ Port Troubleshooting: SRE's "Detective Skills" 🔍
When ports have problems, SREs act like detectives to quickly locate the root cause:
👉 Rapid response: Immediately check service status and port listening
👉 Impact assessment: Determine fault impact scope and user count
👉 Temporary recovery: Prioritize service restoration, then find root cause
👉 Root cause analysis: Deep analysis of fault reasons
👉 Preventive measures: Develop plans to prevent similar issues

5️⃣ AI Detection:
👉 Anomaly pattern recognition: Learn normal behavior patterns based on historical data
👉 Intelligent alert noise reduction: Reduce false positives, improve alert quality
👉 Automated fault recovery: Intelligent execution of preset recovery strategies
👉 Predictive maintenance: Early warning of potential issues
What other AI application scenarios do you think there are? Welcome to discuss!

Ports are like room numbers for every service in the digital world - without room numbers, even the best services are "illegal residents"; when room numbers have problems, users can't find your service. As an SRE, monitoring ports is like building security patrol - you must ensure every "door" is normally open, responds promptly, and remains secure and reliable!
