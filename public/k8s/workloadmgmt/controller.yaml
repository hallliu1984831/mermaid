# daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-daemonset
  labels:
    app: nginx-ds
spec:
  selector:
    matchLabels:
      app: nginx-ds
  template:
    metadata:
      labels:
        app: nginx-ds
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80

kubectl apply -f daemonset.yaml:
   nginx-daemonset-2x9kq

# statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nginx-statefulset
  labels:
    app: nginx-ss
spec:
  serviceName: "nginx-ss-headless"
  replicas: 3
  selector:
    matchLabels:
      app: nginx-ss
  template:
    metadata:
      labels:
        app: nginx-ss
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
  volumeClaimTemplates:
    - metadata:
        name: nginx-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi

kubectl apply -f statefulset.yaml:
   nginx-statefulset-0
   nginx-statefulset-1
   nginx-statefulset-2

# deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx-demo
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-demo
  template:
    metadata:
      labels:
        app: nginx-demo
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80

---
# ClusterIP Service (集群内部访问)
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  labels:
    app: nginx-demo
spec:
  selector:
    app: nginx-demo
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---
# NodePort Service (外部访问)
apiVersion: v1
kind: Service
metadata:
  name: nginx-nodeport
  labels:
    app: nginx-demo
spec:
  selector:
    app: nginx-demo
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080
  type: NodePort

---
# LoadBalancer Service (云环境外部访问)
apiVersion: v1
kind: Service
metadata:
  name: nginx-loadbalancer
  labels:
    app: nginx-demo
spec:
  selector:
    app: nginx-demo
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer



kubectl apply -f deployment.yaml:
   nginx-deployment-7c8d6f7b5c-abcde
   nginx-deployment-7c8d6f7b5c-fghij
   nginx-deployment-7c8d6f7b5c-klmno

nslookup nginx-service
wget -qO- nginx-service:80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-affinity-demo
  labels:
    app: nginx-affinity
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-affinity
  template:
    metadata:
      labels:
        app: nginx-affinity
        tier: frontend
    spec:
      # Node Affinity: 选择特定类型的节点
      affinity:
        nodeAffinity:
          # 硬性要求：必须是Linux节点
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values: ["linux"]
          # 软性偏好：最好是高内存节点
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values: ["high-memory"]

        # Pod Affinity: 希望和Redis缓存住一起
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: ["redis"]
              topologyKey: kubernetes.io/hostname

        # Pod Anti-Affinity: 不和其他nginx实例住同一个节点
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values: ["nginx-affinity"]
            topologyKey: kubernetes.io/hostname

      # Tolerations: 可以住在有特殊标签的节点上
      tolerations:
      - key: "environment"
        operator: "Equal"
        value: "production"
        effect: "NoSchedule"
      - key: "dedicated"
        operator: "Equal"
        value: "frontend"
        effect: "NoExecute"
      - key: "gpu"
        operator: "Exists"
        effect: "NoSchedule"

      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
# Service for the affinity demo
apiVersion: v1
kind: Service
metadata:
  name: nginx-affinity-service
  labels:
    app: nginx-affinity
spec:
  selector:
    app: nginx-affinity
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP